{"version":3,"sources":["components/Calculator.js","App.js","TripCalculator.js","serviceWorker.js","index.js"],"names":["Calculator","props","name","type","min","max","value","sacksOfCorn","onChange","e","setSacksOfCorn","target","onClick","handleCalculate","App","useState","totalCost","setTotalCost","formatter","Intl","NumberFormat","style","currency","className","event","preventDefault","bags","result","parseInt","format","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sPASeA,EAPI,SAACC,GAChB,OAAO,0BAAMC,KAAK,cAAX,mBACa,2BAAOC,KAAK,SAASC,IAAI,IAAIC,IAAI,OAAOH,KAAK,QAAQI,MAAOL,EAAMM,YAAaC,SAAU,SAACC,GAAD,OAAOR,EAAMS,eAAeD,EAAEE,OAAOL,UAC9I,4BAASM,QAASX,EAAMY,iBAAxB,e,MC2BOC,MA3Bf,SAAab,GAAQ,IAAD,EAEoBc,mBAAS,GAF7B,mBAEXR,EAFW,KAEEG,EAFF,OAGgBK,mBAAS,GAHzB,mBAGXC,EAHW,KAGAC,EAHA,KAKZC,EAAY,IAAIC,KAAKC,aAAa,QAAS,CAC/CC,MAAO,WACPC,SAAU,QAUZ,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,CAAYV,gBARQ,SAACW,GACvBA,EAAMC,iBACN,ICjB0BC,EDiBpBC,EChBM,KADcD,EDiBGE,SAASrB,ICf3B,IACAmB,EAAO,EAE4B,KAAlCA,GADwBA,EAAO,IAAM,EAAI,EAAI,IAIlD,EDUPT,EAAaU,IAKmCpB,YAAaA,EAAaG,eAAgBA,IACxF,4CACeQ,EAAUW,OAAOb,MEdlBc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fcfcd9ae.chunk.js","sourcesContent":["import React from 'react';\n\nconst Calculator = (props) => {\n    return <form name='calculator'>\n        Number of bags: <input type='number' min=\"0\" max=\"1000\" name=\"sacks\" value={props.sacksOfCorn} onChange={(e) => props.setSacksOfCorn(e.target.value)}/>\n        <button  onClick={props.handleCalculate}>Calculate</button>\n   </form>;\n}\n\nexport default Calculator;\n","import React, {useState} from 'react';\nimport Calculator from './components/Calculator';\nimport './App.css';\nimport { calculateCost } from './TripCalculator';\n\nfunction App(props) {\n\n  const [sacksOfCorn, setSacksOfCorn] = useState(0);\n  const [totalCost, setTotalCost] = useState(0);\n  \n  const formatter = new Intl.NumberFormat('en-GB', {\n    style: 'currency',\n    currency: 'GBP'\n  });\n\n\n  const handleCalculate = (event) =>{\n    event.preventDefault();\n    const result = calculateCost(parseInt(sacksOfCorn));\n    setTotalCost(result);\n  }\n\n  return (\n    <div className=\"App\">\n      <Calculator handleCalculate={handleCalculate} sacksOfCorn={sacksOfCorn} setSacksOfCorn={setSacksOfCorn}/>\n      <div>\n        Total Cost: {formatter.format(totalCost)}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","\nexport function calculateCost(bags){\n    if(bags === 1){\n        return 0.25;\n    } else if( bags > 0){\n        const extraTripsToEndAtMarket = bags % 2 === 0 ? 1 : 2;\n        return (bags + extraTripsToEndAtMarket) * 0.25;\n    }\n\n    return 0; \n}\n\nexport function calculateTrips(geese, bagsOfCorn){\n    \n    let result = [];\n\n    for(let gooseCount = 0; gooseCount < geese; gooseCount ++){\n        result.push('Goose');\n        if(bagsOfCorn === 0 && gooseCount + 1 < geese){\n            result.push('Return');\n        }\n    }\n\n    for(let cornCount = 0; cornCount < bagsOfCorn; cornCount ++){\n        if(result.length > 0){\n            result.push('Return');\n        }\n        result.push('Corn');\n    }\n    \n    return result;\n}\n\nexport function validateRequest(geese, bagsOfCorn){\n    if(geese === 2 && bagsOfCorn === 2){\n        return {valid:false};\n    }\n    return {valid : true};\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}